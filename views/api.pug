extends layout.pug

block sidebar 
    if userProjects
        each element in userProjects
            li.nav-item 
                a.nav-link.pl-3(href=`./collections?projectid=${element.projectId}` style='padding: 0.5rem 0.5rem 0.5rem 1rem;')
                    i.fa.fa-solid.fa-paw            
                    span.ml-3.item-text= element.projectName

block content
    link(rel='stylesheet', href='../../css/common.css')
    script(src='https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js')
    script(src='https://code.jquery.com/jquery-3.2.1.min.js', integrity='sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=', crossorigin='anonymous')
    
    main.main-content(role='main')
        .container-fluid
            .row.justify-content-center
                a.h5.text-secondary.mb-3(href=`./collections?projectid=${projectId}`)   ‚Üê Project
                .col-12.mb-0.align-items-center
                    .title-bar.align-items-center.justify-content-between(style="display: flex")
                        .collection-info.align-items-start.justify-content-center(style='display: flex; flex-direction: column;')
                            h2.h3.mb-2.page-title(style='font-family: PF Tempesta Seven Extended, sans-serif; font-size: 2rem; align-self: flex-start;') #{collectionName}
                            h5.text-secondary.collection-id(style='align-self: flex-start; font-weight: 400;') #{userApis[0].collectionId}
                        .edit-buttons
                            if !userApis[0].api
                                button.btn.btn-warning(type='button' disabled='' style='font-weight: 700;') Run Collection Test
                            else
                                button.btn.btn-warning(type='button' data-bs-toggle='modal' data-bs-target='#runCollectionModal' data-bs-whatever=`${userApis[0].collectionId}` style='font-weight: 700;') Run Collection Test
                                #runCollectionModal.modal.fade(tabindex='-1' aria-labelledby='runCollectionModalLabel' aria-hidden='true' style='font-weight: 700;')
                                    .modal-dialog.modal-lg
                                        .modal-content
                                            .modal-header
                                                h5#runCollectionModalLabel.modal-title Run Collection Test
                                                button.btn-close(type='button' data-bs-dismiss='modal' aria-label='Close')
                                            .modal-body 
                                                .p-0
                                                table.table
                                                    thead
                                                        tr 
                                                            th.text-dark Domain
                                                            th.text-dark Title
                                                            th.text-dark Run Test
                                                    tbody
                                                        if envInfo
                                                            - let j = 0
                                                            while j < envInfo.length
                                                                tr 
                                                                    td #{envInfo[j].domain_name}
                                                                    td #{envInfo[j].title}
                                                                    td 
                                                                        button.btn.btn-info.btn-collectiontest-in-toggle(type='submit' id=`${userApis[0].collectionId}` domain=`${envInfo[j].domain_name}` title=`${envInfo[j].title}`) Run
                                                                - j++
                .title-divider.mb-4(style='height: 0; overflow: hidden; border-top: 1px solid #e9ecef;')
                .col-12.mb-0.align-items-center
                    .title-bar.mb-4.justify-content-between.align-items-center(style="display: flex")
                        h2.h3.page-title(style='font-family: PF Tempesta Seven Extended, sans-serif; font-size: 1.5rem;') APIs
                        button.btn.btn-success.btn-create_api(type='button' data-bs-toggle='modal' data-bs-target='#exampleModal' data-bs-whatever=`${userApis[0].collectionId}` style='font-weight: 700;') Create API
                        #exampleModal.modal.fade(tabindex='-1' aria-labelledby='exampleModalLabel' aria-hidden='true')
                            .modal-dialog
                                .modal-content
                                    .modal-header
                                        h5#exampleModalLabel.modal-title Add API
                                        button.btn-close(type='button' data-bs-dismiss='modal' aria-label='Close')
                                    .modal-body
                                        form
                                            .mb-3
                                                label.col-form-label(for='collection-id') Collection ID
                                                input#collection-id.form-control.input_collectionid
                                            .mb-3
                                                label.col-form-label(for='api-name') API Name
                                                input#api-name.form-control.input_api-name(type='string' placeholder='My API')
                                            .mb-3
                                                label.col-form-label(for='http-method') HTTP Method
                                                select#http-method.form-control.text-muted.input_http-method
                                                    option(value='' selected='' disabled='' hidden='') Please choose method to test
                                                    option GET 
                                                    option POST 
                                                    option PUT 
                                                    option PATCH 
                                                    option DELETE
                                            .mb-3
                                                label.col-form-label(for='api-endpoint') API Endpoint
                                                input#api-endpoint.form-control.input_api-endpoint(type='string' placeholder='api/1.0/user/signin')
                                            .mb-3
                                                label.col-form-label(for='api-severity') Severity
                                                select#api-severity.form-control.text-muted.input_api-severity
                                                    option(value='' selected='' disabled='' hidden='') Please value the severity
                                                        option 1 
                                                        option 2 
                                                        option 3 
                                                        option 4 
                                                        option 5
                                    .modal-footer
                                        button.btn.btn-secondary(type='button' data-bs-dismiss='modal') Close
                                        button.btn.btn-primary.btn-modal-create_api(type='submit') Create API
                    if !userApis[0].api
                        div(style='display: flex; justify-content: center;')
                            .text-muted.display-6(style='padding-top: 20px') Create your API in this collection!
                    else
                        .card.shadow
                            .card-body
                                table.table.mb-0
                                    thead 
                                        tr 
                                            th.text-secondary Name  
                                            th.text-secondary Method 
                                            th.text-secondary Endpoint 
                                            th.text-secondary Severity 
                                            th.text-secondary Operation 
                                    tbody
                                        - let i = 0
                                        while i < userApis.length
                                            tr
                                                td #{userApis[i].api.api_name}
                                                td #{userApis[i].api.http_method}
                                                td #{userApis[i].api.api_endpoint}
                                                td #{userApis[i].api.severity}
                                                td
                                                    button.btn.btn-warning(type='button' data-bs-toggle='modal' data-bs-target='#runAPIModal' data-bs-whatever=`${userApis[i].api._id}` style='font-weight: 700;') Run API Test
                                                    #runAPIModal.modal.fade(tabindex='-1' aria-labelledby='runAPIModalLabel' aria-hidden='true' style='font-weight: 700;')
                                                        .modal-dialog.modal-lg
                                                            .modal-content
                                                                .modal-header
                                                                    h5#runAPIModalLabel.modal-title Run API Test
                                                                    button.btn-close(type='button' data-bs-dismiss='modal' aria-label='Close')
                                                                .modal-body 
                                                                    .p-0
                                                                    table.table
                                                                        thead
                                                                            tr 
                                                                                th.text-dark Domain
                                                                                th.text-dark Title
                                                                                th.text-dark Run Test
                                                                        tbody
                                                                            if envInfo
                                                                                - let j = 0
                                                                                while j < envInfo.length
                                                                                    tr 
                                                                                        td #{envInfo[j].domain_name}
                                                                                        td #{envInfo[j].title}
                                                                                        td 
                                                                                            button.btn.btn-info.btn-apitest-in-toggle(type='submit' id=`${userApis[i].api._id}` domain=`${envInfo[j].domain_name}` title=`${envInfo[j].title}`) Run
                                                                                    - j++
                                                    button.btn.btn-info.btn-scenarios(type='submit' id=`${userApis[i].api._id}` style='font-weight: 700;') Scenarios
                                                    //- button.btn.btn-secondary(type='submit') Edit
                                                    button.btn.btn-danger.btn-delete(type='submit' id=`${userApis[i].api._id}` style='font-weight: 700;') Delete
                                            - i++
    script. 
        $('.btn-create_api').on('click', function(event) {
            console.log('create_api clicked')
            event.preventDefault();
        })

        $('.btn-scenarios').on('click', function(event) {
            console.log('view scenario clicked')
            event.preventDefault();
            const apiId = this.id;
            window.location.assign(`./scenarios?apiid=${apiId}`);
        })


        $('.btn-delete').on('click', function(event) {
            console.log('delete_api clicked')
            event.preventDefault();

            const collectionId = $('.collection-id').text();
            const apiId = this.id;
            console.log('apiId: ', apiId)

            Swal.fire({
                title: 'Are you sure?',
                text: "You are going to delete this API (and the scenarios related)",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Delete'
            })
            .then((result) => {
                if (result.isConfirmed) {
                    axios({
                        method: 'delete',
                        url: '/editapi',
                        data: {
                            collectionId: collectionId,
                            apiId: apiId,
                        },
                        headers: {'Content-Type': 'application/json'}
                    })
                    .then((response) => {
                        if (response.status === 200) {
                            Swal.fire({
                                text: 'Delete API successfully',
                                icon: "success",
                                confirmButtonClass: "btn-success",
                            })
                            setTimeout(()=> {
                                window.location.reload();
                            }, 2000)
                            //- alert('delete API successfully')
                            //- //- window.location.assign('./testresult');
                            //- window.location.reload();
                        }
                    })
                    .catch((error) => {
                        console.log('in error');
                        console.log('catch: ', error)
                        if (error.response.status === 401) {
                            Swal.fire({
                                    text: 'Please log in first',
                                    icon: "error",
                                    confirmButtonClass: "btn-danger",
                            })
                            setTimeout(()=> {
                                window.location.reload();
                            }, 2000)
                        } else {
                            Swal.fire({
                                    text: 'Delete API failed',
                                    icon: "error",
                                    confirmButtonClass: "btn-danger",
                            })
                            setTimeout(()=> {
                                window.location.reload();
                            }, 2000)
                            //- alert('delete API error')
                        }
                    })
                }
            })
        })

        $('#exampleModal').on('show.bs.modal', function(event) {
            console.log('#exampleModal')
            // Button that triggered the modal
            let button = event.relatedTarget;
            // Extract info from data-bs-* attributes
            let collectionId = $('.btn-create_api').attr('data-bs-whatever');
            // If necessary, you could initiate an AJAX request here
            // and then do the updating in a callback.

            // Update the modal's content.
            $('input#collection-id').val(collectionId).prop('readonly', true);
        })

        $('.btn-modal-create_api').on('click', function(event) {
            console.log('create_api in modal clicked')
            event.preventDefault();
            const collectionId = $('.input_collectionid').val();
            const apiName = $('.input_api-name').val();
            const httpMethod = $('.input_http-method').val();
            const apiEndpoint = $('.input_api-endpoint').val();
            const apiSeverity = $('.input_api-severity').val();

            axios({
                method: 'post',
                url: '/editapi',
                data: {
                    collectionId: collectionId,
                    apiName: apiName,
                    httpMethod: httpMethod,
                    apiEndpoint: apiEndpoint,
                    apiSeverity: apiSeverity,
                },
                headers: {'Content-Type': 'application/json'}
            })
            .then((response) => {
                if (response.status === 200) {
                    Swal.fire({
                        text: 'Create api successfully',
                        icon: "success",
                        confirmButtonClass: "btn-success",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('create api successfully')
                    //- window.location.reload();
                }
            })
            .catch((error) => {
                console.log('in error');
                console.log('catch api error')
                if (error.response.status === 401) {
                    Swal.fire({
                            text: 'Please log in first',
                            icon: "error",
                            confirmButtonClass: "btn-danger",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                } else {
                    Swal.fire({
                        text: 'Create API failed',
                        icon: "error",
                        confirmButtonClass: "btn-danger",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                }
            })
        })


        $('#runAPIModal').on('show.bs.modal', function(event) {
            console.log('#runAPIModal')
            // Button that triggered the modal
            let button = event.relatedTarget;
            // Extract info from data-bs-* attributes
            //- let collectionId = $('.btn-create_api').attr('data-bs-whatever');
            // If necessary, you could initiate an AJAX request here
            // and then do the updating in a callback.

            // Update the modal's content.
            //- $('input#collection-id').val(collectionId).prop('readonly', true);
        })

        $('.btn-apitest-in-toggle').on('click', function(event) {
            console.log('run api test in toggle clicked');
            event.preventDefault();

            Swal.fire({
                title:"Serval is running...", 
                imageUrl: "https://i.gifer.com/PYh.gif",
                imageWidth: 300,
                imageHeight: 300,
                buttons: false,      
                closeOnClickOutside: false,
            });


            const collectionId = $('.collection-id').text();
            const apiId = this.id;
            const domainName = $('.btn-apitest-in-toggle').attr('domain');
            const title = $('.btn-apitest-in-toggle').attr('title');

            axios({
                method: 'post',
                url: '/apirun',
                data: {
                    collectionId: collectionId,
                    apiId: apiId,
                    domainName: domainName,
                    title: title,
                    reportInfo: {
                        report_level: 2,
                        report_type: 'api',
                    }
                }, 
                headers: {'Content-Type': 'application/json'}
            })
            .then((response) => {
                if (response.status === 200) {
                    Swal.fire({
                        text: 'Add api test to running list successfully',
                        icon: "success",
                        confirmButtonClass: "btn-success",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('Run api test successfully')
                    //- window.location.reload();
                }
            })
            .catch((error) => {
                console.log('catch: ', error)
                if (error.response.status === 401) {
                    Swal.fire({
                            text: 'Please log in first',
                            icon: "error",
                            confirmButtonClass: "btn-danger",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                } else {
                    Swal.fire({
                        text: 'Add api test to running list failed',
                        icon: "error",
                        confirmButtonClass: "btn-danger",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('Run api test error')
                }
            })
        })

        $('.btn-collectiontest-in-toggle').on('click', function(event) {
            console.log('run collection test in toggle clicked');
            event.preventDefault();

            Swal.fire({
                title:"Serval is running...", 
                imageUrl: "https://i.gifer.com/PYh.gif",
                imageWidth: 300,
                imageHeight: 300,
                buttons: false,      
                closeOnClickOutside: false,
            });


            const collectionId = this.id;
            const domainName = $('.btn-collectiontest-in-toggle').attr('domain');
            const title = $('.btn-collectiontest-in-toggle').attr('title');

            axios({
                method: 'post',
                url: '/collectionrun',
                data: {
                    collectionId: collectionId,
                    domainName: domainName,
                    title: title,
                    reportInfo: {
                        report_level: 3,
                        report_type: 'collection',
                    }
                }, 
                headers: {'Content-Type': 'application/json'}
            })
            .then((response) => {
                if (response.status === 200) {
                    Swal.fire({
                        text: 'Add collection test to running list successfully',
                        icon: "success",
                        confirmButtonClass: "btn-success",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('Run collection test successfully')
                    //- window.location.reload();
                }
            })
            .catch((error) => {
                console.log('catch: ', error)
                if (error.response.status === 401) {
                    Swal.fire({
                            text: 'Please log in first',
                            icon: "error",
                            confirmButtonClass: "btn-danger",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                } else {
                    Swal.fire({
                        text: 'Add collection test to running list failed',
                        icon: "error",
                        confirmButtonClass: "btn-danger",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('Run collection test error')
                }
            })
        })