extends layout.pug

block content
    link(rel='stylesheet', href='../../css/common.css')
    script(src='https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js')
    script(src='https://code.jquery.com/jquery-3.2.1.min.js', integrity='sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=', crossorigin='anonymous')
    main.main-content(role='main')
        .container-fluid
            .row.justify-content-center
                .col-12
                    //- nav(style="--bs-breadcrumb-divider: '>';" aria-label='breadcrumb')
                    //-     ol.breadcrumb
                    //-         li.breadcrumb-item
                    //-             a(href='') Project
                    //-         li.breadcrumb-item
                    //-             a(href='') Collection
                    //-         li.breadcrumb-item.active(aria-current='page') API
                
                    form.input-form
                        h1 APIs
                            button.btn.btn-right.btn-success.btn-block.btn-create_api(type='button' data-bs-toggle='modal' data-bs-target='#exampleModal' data-bs-whatever=`${userApis[0].collectionId}`) Create API
                        #exampleModal.modal.fade(tabindex='-1' aria-labelledby='exampleModalLabel' aria-hidden='true')
                            .modal-dialog
                                .modal-content
                                    .modal-header
                                        h5#exampleModalLabel.modal-title Add API
                                        button.btn-close(type='button' data-bs-dismiss='modal' aria-label='Close')
                                    .modal-body
                                        form
                                            .mb-3
                                                label.col-form-label(for='collection-id') Collection ID
                                                input#collection-id.form-control.input_collectionid
                                            .mb-3
                                                label.col-form-label(for='api-name') API Name
                                                input#api-name.form-control.input_api-name(type='string' placeholder='My API')
                                            .mb-3
                                                label.col-form-label(for='http-method') HTTP Method
                                                select#http-method.form-control.text-muted.input_http-method
                                                    option(value='' selected='' disabled='' hidden='') Please choose method to test
                                                    option GET 
                                                    option POST 
                                                    option PUT 
                                                    option PATCH 
                                                    option DELETE
                                            .mb-3
                                                label.col-form-label(for='api-endpoint') API Endpoint
                                                input#api-endpoint.form-control.input_api-endpoint(type='string' placeholder='api/1.0/signin')
                                            .mb-3
                                                label.col-form-label(for='api-severity') Severity
                                                select#api-severity.form-control.text-muted.input_api-severity
                                                    option(value='' selected='' disabled='' hidden='') Please value the severity
                                                        option 1 
                                                        option 2 
                                                        option 3 
                                                        option 4 
                                                        option 5
                                    .modal-footer
                                        button.btn.btn-secondary(type='button' data-bs-dismiss='modal') Close
                                        button.btn.btn-primary.btn-modal-create_api(type='submit') Create API
                    .cards
                        .card
                            .card-header
                                .card-title Collection ID: #{userApis[0].collectionId}
                                .card-tools
                            .card-body.p-0
                                table.table
                                    thead
                                        tr
                                            th.text-dark Name
                                            th.text-dark Method
                                            th.text-dark Endpoint
                                            th.text-dark Severity
                                            th.text-dark Scenarios
                                            th.text-dark Operations
                                            th.text-dark(style='width: 500px') Run Test
                                    tbody
                                        if userApis[0].api 
                                            - let i = 0
                                            while i < userApis.length
                                                tr 
                                                    td #{userApis[i].api.api_name}
                                                    td #{userApis[i].api.http_method}
                                                    td #{userApis[i].api.api_endpoint}
                                                    td #{userApis[i].api.severity}
                                                    td 
                                                        button.btn.btn-warning.btn-scenarios(type='submit' id=`${userApis[i].api._id}`) View
                                                    td 
                                                        button.btn.btn-danger.btn-delete(type='submit' id=`${userApis[i].api._id}`) Delete
                                                    td 
                                                        button.btn.btn-info.btn-apitest(type='submit' id=`${userApis[i].api._id}` data-bs-toggle='collapse' data-bs-target=`#runtest-api-${i}` aria-expanded='false' aria-controls=`#runtest-api-${i}`) Run API Test
                                                        .collapse.env-table(id=`runtest-api-${i}`)
                                                            .p-0
                                                                table.table
                                                                    thead
                                                                        tr 
                                                                            th.text-dark Domain
                                                                            th.text-dark Title
                                                                            th.text-dark Run Test
                                                                    tbody
                                                                        if envInfo
                                                                            - let j = 0
                                                                            while j < envInfo.length
                                                                                tr 
                                                                                    td #{envInfo[j].domain_name}
                                                                                    td #{envInfo[j].title}
                                                                                    td 
                                                                                        button.btn.btn-info.btn-apitest-in-toggle(type='submit' id=`${userApis[i].api._id}` domain=`${envInfo[j].domain_name}` title=`${envInfo[j].title}`) Run
                                                                                - j++
                                                - i++
                    .input-form
                        if envInfo && userApis[0].api
                            button.btn.btn-secondary.btn-runtest-collection(type='submit' id=`${userApis[0].collectionId}` data-bs-toggle='collapse' data-bs-target='#runtest-multi' aria-expanded='false' aria-controls='runtest-multi') Run Collection Test
                            #runtest-multi.collapse
                                .card.card-body.p-0
                                    table.table
                                        thead
                                            tr 
                                                th.text-dark Domain
                                                th.text-dark Title
                                                th.text-dark Run Test
                                        tbody
                                            if envInfo && userApis[0].api
                                                - let k = 0
                                                while k < envInfo.length
                                                    tr 
                                                        td #{envInfo[k].domain_name}
                                                        td #{envInfo[k].title}
                                                        td 
                                                            button.btn.btn-secondary.btn-collectiontest-in-toggle(type='submit' id=`${userApis[0].collectionId}` domain=`${envInfo[k].domain_name}` title=`${envInfo[k].title}`) Run
                                                    - k++
                
    script.
        $('.btn-create_api').on('click', function(event) {
            console.log('create_api clicked')
            event.preventDefault();
        })

        $('.btn-scenarios').on('click', function(event) {
            console.log('view scenario clicked')
            event.preventDefault();
            const apiId = this.id;
            window.location.assign(`./scenarios?apiid=${apiId}`);
        })


        $('#exampleModal').on('show.bs.modal', function(event) {
            console.log('#exampleModal')
            // Button that triggered the modal
            let button = event.relatedTarget;
            // Extract info from data-bs-* attributes
            let collectionId = $('.btn-create_api').attr('data-bs-whatever');
            // If necessary, you could initiate an AJAX request here
            // and then do the updating in a callback.

            // Update the modal's content.
            $('input#collection-id').val(collectionId).prop('readonly', true);
        })

        $('.btn-modal-create_api').on('click', function(event) {
            console.log('create_api in modal clicked')
            event.preventDefault();
            const collectionId = $('.input_collectionid').val();
            const apiName = $('.input_api-name').val();
            const httpMethod = $('.input_http-method').val();
            const apiEndpoint = $('.input_api-endpoint').val();
            const apiSeverity = $('.input_api-severity').val();

            axios({
                method: 'post',
                url: '/api/1.0/editapi',
                data: {
                    collectionId: collectionId,
                    apiName: apiName,
                    httpMethod: httpMethod,
                    apiEndpoint: apiEndpoint,
                    apiSeverity: apiSeverity,
                },
                headers: {'Content-Type': 'application/json'}
            })
            .then((response) => {
                if (response.status === 200) {
                    swal({
                        text: 'Create api successfully',
                        icon: "success",
                        confirmButtonClass: "btn-success",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('create api successfully')
                    //- window.location.reload();
                }
            })
            .catch((error) => {
                console.log('in error');
                console.log('catch api error')
                swal({
                        text: 'Create API error',
                        icon: "error",
                        confirmButtonClass: "btn-danger",
                })
                setTimeout(()=> {
                    window.location.reload();
                }, 2000)
            })
        })


        $('.btn-delete').on('click', function(event) {
            console.log('delete_api clicked')
            event.preventDefault();

            const collectionId = $('.card-title').text().replace('Collection ID: ', '');
            const apiId = this.id;
            console.log('apiId: ', apiId)

            axios({
                method: 'delete',
                url: '/api/1.0/editapi',
                data: {
                    collectionId: collectionId,
                    apiId: apiId,
                },
                headers: {'Content-Type': 'application/json'}
            })
            .then((response) => {
                if (response.status === 200) {
                    swal({
                        text: 'Delete API successfully',
                        icon: "success",
                        confirmButtonClass: "btn-success",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('delete API successfully')
                    //- //- window.location.assign('./testresult');
                    //- window.location.reload();
                }
            })
            .catch((error) => {
                console.log('in error');
                console.log('catch: ', error)
                swal({
                        text: 'Delete API error',
                        icon: "error",
                        confirmButtonClass: "btn-danger",
                })
                setTimeout(()=> {
                    window.location.reload();
                }, 2000)
                //- alert('delete API error')
            })
        })

        $('.btn-apitest-in-toggle').on('click', function(event) {
            console.log('run api test in toggle clicked');
            event.preventDefault();
            const collectionId = $('.card-title').text().replace('Collection ID: ', '');
            const apiId = this.id;
            const domainName = $('.btn-apitest-in-toggle').attr('domain');
            const title = $('.btn-apitest-in-toggle').attr('title');

            axios({
                method: 'post',
                url: '/api/1.0/apirun',
                data: {
                    collectionId: collectionId,
                    apiId: apiId,
                    domainName: domainName,
                    title: title,
                    report_info: {
                        report_level: 2,
                        report_type: 'api',
                    }
                }, 
                headers: {'Content-Type': 'application/json'}
            })
            .then((response) => {
                if (response.status === 200) {
                    swal({
                        text: 'Run api test successfully',
                        icon: "success",
                        confirmButtonClass: "btn-success",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('Run api test successfully')
                    //- window.location.reload();
                }
            })
            .catch((error) => {
                console.log('catch: ', error)
                swal({
                        text: 'Run api test error',
                        icon: "error",
                        confirmButtonClass: "btn-danger",
                })
                setTimeout(()=> {
                    window.location.reload();
                }, 2000)
                //- alert('Run api test error')
            })
        })

        $('.btn-collectiontest-in-toggle').on('click', function(event) {
            console.log('run collection test in toggle clicked');
            event.preventDefault();
            const collectionId = this.id;
            const domainName = $('.btn-collectiontest-in-toggle').attr('domain');
            const title = $('.btn-collectiontest-in-toggle').attr('title');

            axios({
                method: 'post',
                url: '/api/1.0/collectionrun',
                data: {
                    collectionId: collectionId,
                    domainName: domainName,
                    title: title,
                    report_info: {
                        report_level: 3,
                        report_type: 'collection',
                    }
                }, 
                headers: {'Content-Type': 'application/json'}
            })
            .then((response) => {
                if (response.status === 200) {
                    swal({
                        text: 'Run collection test successfully',
                        icon: "success",
                        confirmButtonClass: "btn-success",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('Run collection test successfully')
                    //- window.location.reload();
                }
            })
            .catch((error) => {
                console.log('catch: ', error)
                swal({
                        text: 'Run collection test error',
                        icon: "error",
                        confirmButtonClass: "btn-danger",
                })
                setTimeout(()=> {
                    window.location.reload();
                }, 2000)
                //- alert('Run collection test error')
            })
        })