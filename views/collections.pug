extends layout.pug

block content
    link(rel='stylesheet', href='../../css/common.css')
    script(src='https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js')
    script(src='https://code.jquery.com/jquery-3.2.1.min.js', integrity='sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=', crossorigin='anonymous')
    main.main-content(role='main')
        .container-fluid
            .row.justify-content-center
                .col-12
                    //- nav(style="--bs-breadcrumb-divider: '>';" aria-label='breadcrumb')
                    //-     ol.breadcrumb
                    //-         li.breadcrumb-item
                    //-             a(href='') Project
                    //-         li.breadcrumb-item.active(aria-current='page') Collection

                    form.input-form
                        h1(style='font-family: Pixeloid Sans, sans-serif;') Collections
                            button.btn.btn-right.btn-success.btn-block.btn-create_collection(type='button' data-bs-toggle='modal' data-bs-target='#exampleModal' data-bs-whatever=`${userCollections[0].projectId}`) Create Collection
                        #exampleModal.modal.fade(tabindex='-1' aria-labelledby='exampleModalLabel' aria-hidden='true')
                            .modal-dialog
                                .modal-content
                                    .modal-header
                                        h5#exampleModalLabel.modal-title Add Collection
                                        button.btn-close(type='button' data-bs-dismiss='modal' aria-label='Close')
                                    .modal-body
                                        form
                                            .mb-3
                                                label.col-form-label(for='project-id') Project ID
                                                input#project-id.form-control.input_projectid
                                            .mb-3
                                                label.col-form-label(for='collection-name') Collection Name
                                                input#collection-name.form-control.input_collection(type='string' placeholder='My Collection')
                                    .modal-footer
                                        button.btn.btn-secondary(type='button' data-bs-dismiss='modal') Close
                                        button.btn.btn-primary.btn-modal-create_collection(type='submit') Create Collection

                    .cards
                        .card
                            .card-header
                                .card-title Project ID: #{userCollections[0].projectId}
                                .card-tools
                            .card-body.p-0
                                table.table
                                    thead
                                        tr
                                            th.text-dark(style='width: 250px') Collection Name
                                            th.text-dark APIs
                                            th.text-dark Operations
                                            th.text-dark(style='width: 600px') Run Test
                                    tbody
                                        if userCollections[0].collection
                                            - let i = 0
                                            while i < userCollections.length
                                                tr 
                                                    td #{userCollections[i].collection.collection_name}
                                                    td 
                                                        button.btn.btn-warning.btn-apis(type='submit' id=`${userCollections[i].collection._id}`) View
                                                    td 
                                                        button.btn.btn-danger.btn-delete(type='submit' id=`${userCollections[i].collection._id}`) Delete
                                                    td 
                                                        button.btn.btn-info.btn-collectiontest(type='submit' id=`${userCollections[i].collection._id}` data-bs-toggle='collapse' data-bs-target=`#runtest-collection-${i}` aria-expanded='false' aria-controls=`#runtest-collection-${i}`) Run Collection Test
                                                        .collapse.env-table(id=`runtest-collection-${i}`)
                                                            .p-0
                                                                table.table
                                                                    thead
                                                                        tr 
                                                                            th.text-dark(style='width: 30px') Domain
                                                                            th.text-dark(style='width: 20px') Title
                                                                            th.text-dark Run Test
                                                                    tbody
                                                                        if envInfo
                                                                            - let j = 0
                                                                            while j < envInfo.length
                                                                                tr 
                                                                                    td #{envInfo[j].domain_name}
                                                                                    td #{envInfo[j].title}
                                                                                    td 
                                                                                        button.btn.btn-info.btn-collectiontest-in-toggle(type='submit' id=`${userCollections[i].collection._id}` domain=`${envInfo[j].domain_name}` title=`${envInfo[j].title}`) Run
                                                                                - j++ 
                                                - i++
    script.
        $('.btn-create_collection').on('click', function(event) {
            console.log('create_collection clicked')
            event.preventDefault();
            //- window.location.assign('./editcollection');
        })

        $('.btn-apis').on('click', function(event) {
            console.log('view api clicked')
            event.preventDefault();
            const collectionId = this.id;
            window.location.assign(`./apis?collectionid=${collectionId}`);
        })
        

        $('#exampleModal').on('show.bs.modal', function(event) {
            console.log('#exampleModal')
            // Button that triggered the modal
            let button = event.relatedTarget;
            //- // Extract info from data-bs-* attributes
            let projectId = $('.btn-create_collection').attr('data-bs-whatever');
            //- // If necessary, you could initiate an AJAX request here
            //- // and then do the updating in a callback.

            //- // Update the modal's content.
            $('input#project-id').val(projectId).prop('readonly', true);
        })

        $('.btn-modal-create_collection').on('click', function(event) {
            console.log('create_collection in modal clicked')
            event.preventDefault();
            const projectId = $('.input_projectid').val();
            const collectionName = $('.input_collection').val();

            axios({
                method: 'post',
                url: '/api/1.0/editcollection',
                data: {
                    projectId: projectId,
                    collectionName: collectionName,
                },
                headers: {'Content-Type': 'application/json'}
            })
            .then((response) => {
                if (response.status === 200) {
                    swal({
                        text: 'Create collection successfully',
                        icon: "success",
                        confirmButtonClass: "btn-success",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('create collection successfully')
                    //- window.location.reload();
                }
            })
            .catch((error) => {
                console.log('in error');
                console.log('catch collection error')
                swal({
                        text: 'Create collection error',
                        icon: "error",
                        confirmButtonClass: "btn-danger",
                })
                setTimeout(()=> {
                    window.location.reload();
                }, 2000)
            })
        })


        $('.btn-delete').on('click', function(event) {
            console.log('delete_collection clicked')
            event.preventDefault();

            const projectId = $('.card-title').text().replace('Project ID: ', '');
            const collectionId = this.id;
            console.log('projectId: ', projectId)

            axios({
                method: 'delete',
                url: '/api/1.0/editcollection',
                data: {
                    projectId: projectId,
                    collectionId: collectionId,
                },
                headers: {'Content-Type': 'application/json'}
            })
            .then((response) => {
                if (response.status === 200) {
                    swal({
                        text: 'Delete project successfully',
                        icon: "success",
                        confirmButtonClass: "btn-success",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('delete project successfully')
                    //- window.location.assign('./testresult');
                    //- window.location.reload();
                }
            })
            .catch((error) => {
                console.log('in error');
                console.log('catch: ', error)
                swal({
                        text: 'Delete project error',
                        icon: "error",
                        confirmButtonClass: "btn-danger",
                })
                setTimeout(()=> {
                    window.location.reload();
                }, 2000)
                //- alert('delete project error')
            })
        })

        $('.btn-collectiontest-in-toggle').on('click', function(event) {
            console.log('run collection test in toggle clicked');
            event.preventDefault();
            const collectionId = this.id;
            const domainName = $('.btn-collectiontest-in-toggle').attr('domain');
            const title = $('.btn-collectiontest-in-toggle').attr('title');

            axios({
                method: 'post',
                url: '/api/1.0/collectionrun',
                data: {
                    collectionId: collectionId,
                    domainName: domainName,
                    title: title,
                    report_info: {
                        report_level: 3,
                        report_type: 'collection',
                    }
                }, 
                headers: {'Content-Type': 'application/json'}
            })
            .then((response) => {
                if (response.status === 200) {
                    swal({
                        text: 'Run collection test successfully',
                        icon: "success",
                        confirmButtonClass: "btn-success",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('Run collection test successfully')
                    //- window.location.reload();
                }
            })
            .catch((error) => {
                console.log('catch: ', error)
                swal({
                        text: 'Run collection test error',
                        icon: "error",
                        confirmButtonClass: "btn-danger",
                })
                setTimeout(()=> {
                    window.location.reload();
                }, 2000)
                //- alert('Run collection test error')
            })
        })