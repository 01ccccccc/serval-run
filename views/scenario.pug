extends layout.pug

block sidebar 
    if userProjects
        each element in userProjects
            li.nav-item 
                a.nav-link.pl-3(href=`./collections?projectid=${element.projectId}` style='padding: 0.5rem 0.5rem 0.5rem 1rem;')
                    i.fa.fa-solid.fa-paw            
                    span.ml-3.item-text= element.projectName

block content
    link(rel='stylesheet', href='../../css/common.css')
    script(src='https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js')
    script(src='https://code.jquery.com/jquery-3.2.1.min.js', integrity='sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=', crossorigin='anonymous')
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.52.2/codemirror.min.css')
    script(type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.52.2/codemirror.min.js')
    script(src='../../src/js/bootstrap.min.js')
    script(src='../../src/gherkin.js')
    
    main.main-content(role='main')
        .container-fluid
            .row.justify-content-center
                a.h5.text-secondary(href=`./apis?collectionid=${collectionId}`)  ‚Üê APIs
                .col-12.mb-0.align-items-center
                    .title-bar.align-items-center.justify-content-between(style='display: flex')
                        .api-info.align-items-start.justify-content-center(style='display: flex; flex-direction: column;')
                            h2.h3.mb-2.page-title(style='font-family: PF Tempesta Seven Extended, sans-serif; font-size: 2rem; align-self: flex-start;') #{apiName}
                            h5.text-secondary.api-id(style='align-self: flex-start; font-weight: 400;') #{userScenarios[0].apiId}
                        .edit-buttons
                            if !userScenarios[0].scenario
                                button.btn.btn-warning(type='button' disabled='' style='font-weight: 700;') Run API Test
                            else
                                button.btn.btn-warning(type='button' data-bs-toggle='modal' data-bs-target='#runAPIModal' data-bs-whatever=`${userScenarios[0].apiId}` style='font-weight: 700;') Run API Test
                                #runAPIModal.modal.fade(tabindex='-1' aria-labelledby='runAPIModalLabel' aria-hidden='true' style='font-weight: 700;')
                                    .modal-dialog.modal-lg
                                        .modal-content
                                            .modal-header
                                                h5#runAPIModalLabel.modal-title Run API Test
                                                button.btn-close(type='button' data-bs-dismiss='modal' aria-label='Close')
                                            .modal-body 
                                                .p-0
                                                table.table
                                                    thead
                                                        tr 
                                                            th.text-dark Domain
                                                            th.text-dark Title
                                                            th.text-dark Run Test
                                                    tbody
                                                        if envInfo
                                                            - let j = 0
                                                            while j < envInfo.length
                                                                tr 
                                                                    td #{envInfo[j].domain_name}
                                                                    td #{envInfo[j].title}
                                                                    td 
                                                                        button.btn.btn-info.btn-apitest-in-toggle(type='submit' id=`${userScenarios[0].apiId}` domain=`${envInfo[j].domain_name}` title=`${envInfo[j].title}`) Run
                                                                - j++
                .title-divider.mb-4(style='height: 0; overflow: hidden; border-top: 1px solid #e9ecef;')
                .col-12.mb-0.align-items-center
                    .title-bar.mb-4.justify-content-between.align-items-center(style="display: flex")
                        h2.h3.page-title(style='font-family: PF Tempesta Seven Extended, sans-serif; font-size: 1.5rem;') Scenarios
                        button.btn.btn-success.btn-create_scenario(type='button' data-bs-toggle='modal' data-bs-target='#exampleModal' data-bs-whatever=`${userScenarios[0].apiId}` style='font-weight: 700;') Create Scenario
                        #exampleModal.modal.fade(tabindex='-1' aria-labelledby='exampleModalLabel' aria-hidden='true' )
                            .modal-dialog.modal-lg
                                .modal-content
                                    .modal-header
                                        h5#exampleModalLabel.modal-title Add Scenario
                                        button.btn-close(type='button' data-bs-dismiss='modal' aria-label='Close')
                                    .modal-body
                                        form
                                            .mb-3 
                                                label.col-form-label(for='api-id') API ID
                                                input#api-id.form-control.input_apiid
                                            .mb-3
                                                label.col-form-label(for='scenario') Test Document (Scenario)
                                                textarea#code(name='code' placeholder='# Write your test document in gherkin language here! \n # The serval can only read gherkin now, meow.')
                                                    | # Write your test document scenario in gherkin language here! 
                                                    | # The serval can only read gherkin now, meow.
                                                    | Feature: Sign in
                                                    | user system to make user sign in
                                                    |   @signin
                                                    |  Scenario Outline: user sign in
                                                    |    Given I am an existing <provider> user
                                                    |    And I have entered <email> in the form
                                                    |    And I have entered <password> into the form
                                                    |    When I press signin
                                                    |    Then the result should be <status> on the screen
                                                    |
                                                    |    Examples: 
                                                    |      | provider | email             | password      | status |
                                                    |      | native   | serval@gmail.com  | Serval123     |    200 |
                                                    |      | native   | serval@gmail.com  | Serval1234444 |    403 |
                                    .modal-footer
                                        button.btn.btn-secondary(type='button' data-bs-dismiss='modal') Close
                                        button.btn.btn-primary.btn-modal-create_scenario(type='submit') Create Scenario
                    
                    if !userScenarios[0].scenario
                        .col-12(style='display: flex; justify-content: center;')
                            .text-muted.display-6(style='padding-top: 20px') Create your scenario in this API!
                    else
                        - let i = 0
                        while i < userScenarios.length
                            .col-12.mb-4(style='padding: 0;')
                                #accordion1.accordion.w-100
                                    .card.shadow
                                        #heading1.card-header(name=`${userScenarios[i].scenario._id}` style='cursor: pointer;')
                                            a(role='button' href='#collapse1' data-toggle='collapse' data-target='#collapse1' aria-expanded='true' aria-controls='collapse1')
                                            .justify-content-between.align-items-center(style='display: flex;')
                                                .scenario-info.justify-content-start
                                                    strong.align-items-center(style='font-size: 2rem; font-weight: 400; line-height: 1.2;') #{userScenarios[i].scenario.title}
                                                    p.h4.text-muted #{userScenarios[i].scenario.description}
                                                i.h2.fa.fa-solid.fa-caret-down.mr-3
                                                
                                        .collapse.show(aria-labelledby='heading1' data-parent='#accordion1' style='display: none;' id=`${userScenarios[i].scenario._id}`)
                                            
                                            .row
                                                .col-md-6
                                                    .card.shadow.mb-4.ml-4
                                                        .card-body(style='height: 25rem; overflow-y: scroll;')
                                                            h5.card-title Steps
                                                            .table
                                                                .list-group.list-group-flush.my-n3 
                                                                    each element in userScenarios[i].scenario.steps
                                                                        .list-group-item(style='padding-left: 0;')
                                                                            .row.align-items-center 
                                                                                .col 
                                                                                    p.mb-0.badge.bg-light.text-dark(style='font-size: 90%;')= element.keyword 
                                                                                    small.list-inline-item.pl-2(style='font-size: 90%;')= element.text
                                                .col-md-6
                                                    .card.shadow.mb-4.mr-4
                                                        .card-body(style='height: 25rem; overflow-y: scroll;')
                                                            h5.card-title Examples
                                                            table.table.table-bordered.table-hover.mb-0
                                                                tr
                                                                each val, key in userScenarios[i].scenario.examples[0].example
                                                                    th(style='font-size: 0.875rem; font-weight: 600;')= key
                                                                each example in userScenarios[i].scenario.examples
                                                                    tr
                                                                    each val, key in example.example
                                                                        td(style='font-size: 0.875rem;')= val
                                            .justify-content-end.mb-4(style='display: flex;')
                                                .align-items-center.my-1.edit-buttons.pr-3
                                                    button.btn.btn-warning(type='button' data-bs-toggle='modal' data-bs-target='#runScenarioModal' data-bs-whatever=`${userScenarios[i].scenario._id}`) RUN SCENARIO TEST
                                                    #runScenarioModal.modal.fade(tabindex='-1' aria-labelledby='runScenarioModalLabel' aria-hidden='true')
                                                        .modal-dialog.modal-lg
                                                            .modal-content
                                                                .modal-header
                                                                    h5#runScenarioModalLabel.modal-title Run Scenario Test
                                                                    button.btn-close(type='button' data-bs-dismiss='modal' aria-label='Close')
                                                                .modal-body 
                                                                    .p-0
                                                                    table.table
                                                                        thead
                                                                            tr 
                                                                                th.text-dark Domain
                                                                                th.text-dark Title
                                                                                th.text-dark Run Test
                                                                        tbody
                                                                            if envInfo
                                                                                - let j = 0
                                                                                while j < envInfo.length
                                                                                    tr 
                                                                                        td #{envInfo[j].domain_name}
                                                                                        td #{envInfo[j].title}
                                                                                        td 
                                                                                            button.btn.btn-info.btn-scenariotest-in-toggle(type='submit' id=`${userScenarios[i].scenario._id}` domain=`${envInfo[j].domain_name}` title=`${envInfo[j].title}`) Run
                                                                                    - j++
                                                            //- .modal-footer
                                                            //-     button.btn.btn-secondary(type='button' data-bs-dismiss='modal') Close
                                                            //-     button.btn.btn-primary.btn-scenariotest-in-modal(type='submit' id=`${userScenarios[i].scenario._id}` domain=`${envInfo[j].domain_name}` title=`${envInfo[j].title}`) Send Scenario Test to List
                                                    button.btn.btn-danger.btn-delete(id=`${userScenarios[i].scenario._id}`) DELETE
                            - i++
    script. 
        $('.card-header').on('click', function(){
            let name = $(this).attr('name');
            $(`#${name}`).toggle('show');
        })

        $('#exampleModal').on('shown.bs.modal', function() {
            // src: https://stackoverflow.com/questions/17086538/codemirror-content-not-visible-in-bootstrap-modal-until-it-is-clicked
            // initialize codemirror here
            let editors = Array.from(document.getElementsByClassName("CodeMirror"))
            editors.forEach((element)=>{
                element.remove();
            });
            let editor = CodeMirror.fromTextArea(document.getElementById("code"), {
                lineNumbers: true,
                matchBrackets: true,
                mode: 'text/x-feature'
            });

            $('.btn-modal-create_scenario').on('click', function(event) {
                console.log('create scenario in modal clicked')
                event.preventDefault();

                swal({
                    title:"", 
                    text:"Loading...",
                    icon: "https://www.boasnotas.com/img/loading2.gif",
                    buttons: false,      
                    closeOnClickOutside: false,
                });

                const apiId = $('.input_apiid').val();
                const featureCode = editor.getValue();

                axios({
                    method: 'post',
                    url: '/editscenario',
                    data: {
                        apiId: apiId,
                        featureCode: featureCode,
                    },
                    headers: {'Content-Type': 'application/json'},
                })
                .then((response) => {
                    if (response.status === 200) {
                        swal({
                            text: 'Create scenario successfully',
                            icon: "success",
                            //- confirmButtonClass: "btn-success",
                        })
                        setTimeout(()=> {
                            window.location.reload();
                        }, 2000)
                    }
                })
                .catch((error) => {
                    console.log('in error');
                    console.log('catch: ', error)
                    if (error.response.status === 422) {
                        swal({
                            text: 'Compile gherkin script error',
                            icon: "error",
                            //- confirmButtonClass: "btn-success",
                        })
                        setTimeout(()=> {
                            window.location.reload();
                        }, 2000)
                    } else {
                        swal({
                            text: 'Create scenario error',
                            icon: "error",
                            confirmButtonClass: "btn-danger",
                        })
                        setTimeout(()=> {
                            window.location.reload();
                        }, 2000)
                        //- alert('create scenario error')
                    }
                })
            })
        })


        $('#exampleModal').on('show.bs.modal', function(event) {
            let button = event.relatedTarget;
            let apiId = $('.btn-create_scenario').attr('data-bs-whatever');
            $('input#api-id').val(apiId).prop('readonly', true);
        })

        $('.btn-create_scenario').on('click', function(event) {
            console.log('create_scenario clicked')
            event.preventDefault();
        })

        $('.btn-scenariotest-in-modal').on('click', function(event) {
            console.log('run scenario test in toggle clicked');
            event.preventDefault();

            swal({
                title:"Serval is running...", 
                //- html: true,
                //- icon: "https://i.gifer.com/2yqU.gif",
                icon: "https://i.gifer.com/PYh.gif",
                buttons: false,      
                closeOnClickOutside: false,
                //- timer: 5000,
            });


            const apiId = $('.card-title').text().replace('API ID: ', '');
            const scenarioId = this.id;
            const domainName = $('.btn-scenariotest-in-toggle').attr('domain');
            const title = $('.btn-scenariotest-in-toggle').attr('title');

            axios({
                method: 'post',
                url: '/scenariorun',
                data: {
                    apiId: apiId,
                    scenarioId: scenarioId,
                    domainName: domainName,
                    title: title,
                    report_info: {
                        report_level: 1,
                        report_type: 'scenario',
                    }
                }, 
                headers: {'Content-Type': 'application/json'}
            })
            .then((response) => {
                if (response.status === 200) {
                    swal({
                        text: 'Add scenario test to running list successfully',
                        icon: "success",
                        confirmButtonClass: "btn-success",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('Run scenario test successfully')
                    //- window.location.reload();
                }
            })
            .catch((error) => {
                console.log('catch: ', error)
                swal({
                        text: 'Add scenario test to running list error',
                        icon: "error",
                        confirmButtonClass: "btn-danger",
                })
                setTimeout(()=> {
                    window.location.reload();
                }, 2000)
                //- alert('Run scenario test error')
            })
        })


        $('.btn-delete').on('click', function(event) {
            console.log('delete_scenario clicked')
            event.preventDefault();

            const apiId = $('.api-id').text();
            const scenarioId = this.id;
            console.log('scenarioId: ', scenarioId)

            axios({
                method: 'delete',
                url: '/editscenario',
                data: {
                    apiId: apiId,
                    scenarioId: scenarioId,
                },
                headers: {'Content-Type': 'application/json'}
            })
            .then((response) => {
                if (response.status === 200) {
                    swal({
                        text: 'Delete scenario successfully',
                        icon: "success",
                        confirmButtonClass: "btn-success",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('delete scenario successfully')
                    //- window.location.reload();
                }
            })
            .catch((error) => {
                console.log('in error');
                console.log('catch: ', error)
                swal({
                        text: 'Delete scenario error',
                        icon: "error",
                        confirmButtonClass: "btn-danger",
                })
                setTimeout(()=> {
                    window.location.reload();
                }, 2000)
                //- alert('delete scenario error')
            })
        })

        $(document).ready(() => {
            let popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
            let popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
                return new bootstrap.Popover(popoverTriggerEl)
            })
        })

        $('#runScenarioModal').on('show.bs.modal', function(event) {
            console.log('#runScenarioModal')
            // Button that triggered the modal
            let button = event.relatedTarget;
            // Extract info from data-bs-* attributes
            //- let collectionId = $('.btn-create_api').attr('data-bs-whatever');
            // If necessary, you could initiate an AJAX request here
            // and then do the updating in a callback.

            // Update the modal's content.
            //- $('input#collection-id').val(collectionId).prop('readonly', true);
        })


        $('.btn-scenariotest-in-toggle').on('click', function(event) {
            console.log('run scenario test in toggle clicked');
            event.preventDefault();

            swal({
                title:"Serval is running...", 
                //- html: true,
                //- icon: "https://i.gifer.com/2yqU.gif",
                icon: "https://i.gifer.com/PYh.gif",
                buttons: false,      
                closeOnClickOutside: false,
                //- timer: 5000,
            });


            const apiId = $('.api-id').text();
            const scenarioId = this.id;
            const domainName = $('.btn-scenariotest-in-toggle').attr('domain');
            const title = $('.btn-scenariotest-in-toggle').attr('title');

            axios({
                method: 'post',
                url: '/scenariorun',
                data: {
                    apiId: apiId,
                    scenarioId: scenarioId,
                    domainName: domainName,
                    title: title,
                    report_info: {
                        report_level: 1,
                        report_type: 'scenario',
                    }
                }, 
                headers: {'Content-Type': 'application/json'}
            })
            .then((response) => {
                if (response.status === 200) {
                    swal({
                        text: 'Add scenario test to running list successfully',
                        icon: "success",
                        confirmButtonClass: "btn-success",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('Run scenario test successfully')
                    //- window.location.reload();
                }
            })
            .catch((error) => {
                console.log('catch: ', error)
                swal({
                        text: 'Add scenario test to running list error',
                        icon: "error",
                        confirmButtonClass: "btn-danger",
                })
                setTimeout(()=> {
                    window.location.reload();
                }, 2000)
                //- alert('Run scenario test error')
            })
        })
