extends layout.pug

block content
    link(rel='stylesheet', href='../../css/common.css')
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.52.2/codemirror.min.css')
    script(type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.52.2/codemirror.min.js')
    script(src='https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js')
    script(src='https://code.jquery.com/jquery-3.2.1.min.js', integrity='sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=', crossorigin='anonymous')
    script(src='../../src/gherkin.js')
    main.main-content(role='main')
        .container-fluid
            .row.justify-content-center
                .col-12
                    //- nav(style="--bs-breadcrumb-divider: '>';" aria-label='breadcrumb')
                    //-     ol.breadcrumb
                    //-         li.breadcrumb-item
                    //-             a(href='') Project
                    //-         li.breadcrumb-item
                    //-             a(href='') Collection
                    //-         li.breadcrumb-item
                    //-             a(href='') API
                    //-         li.breadcrumb-item.active(aria-current='page') Scenario

                    form.input-form
                        h1(style='font-family: PF Tempesta Seven Extended, sans-serif; font-size: 2rem;') Scenarios
                            button.btn.btn-right.btn-success.btn-block.btn-create_scenario(type='button' data-bs-toggle='modal' data-bs-target='#exampleModal' data-bs-whatever=`${userScenarios[0].apiId}`) Create Scenario
                        #exampleModal.modal.fade(tabindex='-1' aria-labelledby='exampleModalLabel' aria-hidden='true')
                            .modal-dialog.modal-lg
                                .modal-content
                                    .modal-header
                                        h5#exampleModalLabel.modal-title Add Scenario
                                        button.btn-close(type='button' data-bs-dismiss='modal' aria-label='Close')
                                    .modal-body
                                        form
                                            .mb-3 
                                                label.col-form-label(for='api-id') API ID
                                                input#api-id.form-control.input_apiid
                                            .mb-3
                                                label.col-form-label(for='scenario') Test Document (Scenario)
                                                textarea#code(name='code' placeholder='# Write your test document in gherkin language here! \n # The serval can only read gherkin now, meow.')
                                                    | # Write your test document scenario in gherkin language here! 
                                                    | # The serval can only read gherkin now, meow.
                                    .modal-footer
                                        button.btn.btn-secondary(type='button' data-bs-dismiss='modal') Close
                                        button.btn.btn-primary.btn-modal-create_scenario(type='submit') Create Scenario
                    .cards
                        .card
                            .card-header
                                .card-title API ID: #{userScenarios[0].apiId}
                                .card-tools
                            .card-body.p-0
                                table.table
                                    thead
                                        tr
                                            th.text-dark(style='width: 80px') Title
                                            th.text-dark(style='width: 150px') Description
                                            th.text-dark(style='width: 360px') Steps
                                            th.text-dark(style='width: 20px') Examples
                                            th.text-dark(style='width: 20px') Edit
                                            th.text-dark Run Test
                                    tbody
                                        if userScenarios[0].scenario
                                            - let i = 0
                                            while i < userScenarios.length
                                                tr 
                                                    td #{userScenarios[i].scenario.title}
                                                    td #{userScenarios[i].scenario.description}
                                                    td 
                                                        button.btn.btn-primary.btn-steps(type='submit' id=`${userScenarios[i].scenario._id}` data-bs-toggle='collapse' data-bs-target=`#scenario-steps-${i}` aria-expanded='false' aria-controls=`#scenario-steps-${i}`) More
                                                        .collapse(id=`scenario-steps-${i}`)
                                                            .p-0
                                                                table
                                                                    #info-text
                                                                        dl(style='padding-top: 5px; margin-bottom: 0px;')
                                                                            each element in userScenarios[i].scenario.steps
                                                                                dt.badge.bg-light.text-dark(style='font-size: 90%;')= element.keyword
                                                                                dd.list-inline-item(style='font-size: 90%;')= element.text
                                                                                br
                                                    td 
                                                        button.btn.btn-warning.btn-examples(type='submit' id=`${userScenarios[i].scenario._id}` data-bs-toggle='collapse' data-bs-target=`#scenario-examples-${i}` aria-expanded='false' aria-controls=`#scenario-examples-${i}`) More
                                                        //- .collapse(id=`scenario-examples-${i}`)
                                                        //-     .p-0 
                                                        //-         table 
                                                        //-             tbody 
                                                        //-                 each element in userScenarios[i].scenario.examples
                                                        //-                     tr=element.example.email
                                                    td 
                                                        button.btn.btn-danger.btn-delete(type='submit' id=`${userScenarios[i].scenario._id}`) Delete
                                                    td 
                                                        button.btn.btn-info.btn-runtest-single(type='submit' id=`${userScenarios[i].scenario._id}` data-bs-toggle='collapse' data-bs-target=`#runtest-single-${i}` aria-expanded='false' aria-controls=`#runtest-single-${i}`) Run Scenario Test
                                                        .collapse.env-table(id=`runtest-single-${i}`)
                                                            .p-0
                                                                table.table
                                                                    thead
                                                                        tr 
                                                                            th.text-dark Domain
                                                                            th.text-dark Title
                                                                            th.text-dark Run Test
                                                                    tbody
                                                                        if envInfo
                                                                            - let j = 0
                                                                            while j < envInfo.length
                                                                                tr 
                                                                                    td #{envInfo[j].domain_name}
                                                                                    td #{envInfo[j].title}
                                                                                    td 
                                                                                        button.btn.btn-info.btn-scenariotest-in-toggle(type='submit' id=`${userScenarios[i].scenario._id}` domain=`${envInfo[j].domain_name}` title=`${envInfo[j].title}`) Run
                                                                                - j++
                                                - i++
                    .input-form
                        if envInfo && userScenarios[0].scenario
                            button.btn.btn-secondary.btn-runtest-api(type='submit' id=`${userScenarios[0].apiId}` data-bs-toggle='collapse' data-bs-target='#runtest-api' aria-expanded='false' aria-controls='runtest-api') Run API Test
                            #runtest-api.collapse
                                .card.card-body.p-0
                                    table.table
                                        thead
                                            tr 
                                                th.text-dark Domain
                                                th.text-dark Title
                                                th.text-dark Run Test
                                        tbody
                                            if envInfo
                                                - let k = 0
                                                while k < envInfo.length
                                                    tr 
                                                        td #{envInfo[k].domain_name}
                                                        td #{envInfo[k].title}
                                                        td 
                                                            button.btn.btn-secondary.btn-apitest-in-toggle(type='submit' id=`${userScenarios[0].apiId}` domain=`${envInfo[k].domain_name}` title=`${envInfo[k].title}`) Run
                                                    - k++
    script.
        $('#exampleModal').on('shown.bs.modal', function() {
            // src: https://stackoverflow.com/questions/17086538/codemirror-content-not-visible-in-bootstrap-modal-until-it-is-clicked
            // initialize codemirror here
            let editors = Array.from(document.getElementsByClassName("CodeMirror"))
            editors.forEach((element)=>{
                element.remove();
            });
            let editor = CodeMirror.fromTextArea(document.getElementById("code"), {
                lineNumbers: true,
                matchBrackets: true,
                mode: 'text/x-feature'
            });

            $('.btn-modal-create_scenario').on('click', function(event) {
                console.log('create scenario in modal clicked')
                event.preventDefault();

                swal({
                    title:"", 
                    text:"Loading...",
                    icon: "https://www.boasnotas.com/img/loading2.gif",
                    buttons: false,      
                    closeOnClickOutside: false,
                    timer: 3000,
                    //icon: "success"
                });

                const apiId = $('.input_apiid').val();
                const featureCode = editor.getValue();

                axios({
                    method: 'post',
                    url: '/api/1.0/editscenario',
                    data: {
                        apiId: apiId,
                        featureCode: featureCode,
                    },
                    headers: {'Content-Type': 'application/json'},
                })
                .then((response) => {
                    if (response.status === 200) {
                        swal({
                            text: 'Create scenario successfully',
                            icon: "success",
                            //- confirmButtonClass: "btn-success",
                        })
                        setTimeout(()=> {
                            window.location.reload();
                        }, 2000)
                        //- alert('create scenario successfully')
                        //- window.location.reload();
                    }
                })
                .catch((error) => {
                    console.log('in error');
                    console.log('catch: ', error)
                    swal({
                        text: 'Create scenario error',
                        icon: "error",
                        confirmButtonClass: "btn-danger",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('create scenario error')
                })
            })
        })


        $('#exampleModal').on('show.bs.modal', function(event) {
            let button = event.relatedTarget;
            let apiId = $('.btn-create_scenario').attr('data-bs-whatever');
            $('input#api-id').val(apiId).prop('readonly', true);
        })

        $('.btn-create_scenario').on('click', function(event) {
            console.log('create_scenario clicked')
            event.preventDefault();
        })

        $('.btn-scenariotest-in-toggle').on('click', function(event) {
            console.log('run scenario test in toggle clicked');
            event.preventDefault();

            swal({
                title:"Serval is running...", 
                //- html: true,
                //- icon: "https://i.gifer.com/2yqU.gif",
                icon: "https://i.gifer.com/PYh.gif",
                buttons: false,      
                closeOnClickOutside: false,
                //- timer: 5000,
            });


            const apiId = $('.card-title').text().replace('API ID: ', '');
            const scenarioId = this.id;
            const domainName = $('.btn-scenariotest-in-toggle').attr('domain');
            const title = $('.btn-scenariotest-in-toggle').attr('title');

            axios({
                method: 'post',
                url: '/api/1.0/scenariorun',
                data: {
                    apiId: apiId,
                    scenarioId: scenarioId,
                    domainName: domainName,
                    title: title,
                    report_info: {
                        report_level: 1,
                        report_type: 'scenario',
                    }
                }, 
                headers: {'Content-Type': 'application/json'}
            })
            .then((response) => {
                if (response.status === 200) {
                    swal({
                        text: 'Add acenario test to running list successfully',
                        icon: "success",
                        confirmButtonClass: "btn-success",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('Run scenario test successfully')
                    //- window.location.reload();
                }
            })
            .catch((error) => {
                console.log('catch: ', error)
                swal({
                        text: 'Add acenario test to running list error',
                        icon: "error",
                        confirmButtonClass: "btn-danger",
                })
                setTimeout(()=> {
                    window.location.reload();
                }, 2000)
                //- alert('Run scenario test error')
            })
        })


        $('.btn-delete').on('click', function(event) {
            console.log('delete_scenario clicked')
            event.preventDefault();

            const apiId = $('.card-title').text().replace('API ID: ', '');
            const scenarioId = this.id;
            console.log('scenarioId: ', scenarioId)

            axios({
                method: 'delete',
                url: '/api/1.0/editscenario',
                data: {
                    apiId: apiId,
                    scenarioId: scenarioId,
                },
                headers: {'Content-Type': 'application/json'}
            })
            .then((response) => {
                if (response.status === 200) {
                    swal({
                        text: 'Delete scenario successfully',
                        icon: "success",
                        confirmButtonClass: "btn-success",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('delete scenario successfully')
                    //- window.location.reload();
                }
            })
            .catch((error) => {
                console.log('in error');
                console.log('catch: ', error)
                swal({
                        text: 'Delete scenario error',
                        icon: "error",
                        confirmButtonClass: "btn-danger",
                })
                setTimeout(()=> {
                    window.location.reload();
                }, 2000)
                //- alert('delete scenario error')
            })
        })


        $('.btn-apitest-in-toggle').on('click', function(event) {
            console.log('run api test in toggle clicked');
            event.preventDefault();

            swal({
                title:"Serval is running...", 
                //- html: true,
                //- icon: "https://i.gifer.com/2yqU.gif",
                icon: "https://i.gifer.com/PYh.gif",
                buttons: false,      
                closeOnClickOutside: false,
                //- timer: 5000,
            });

            const apiId = $('.card-title').text().replace('API ID: ', '');
            const scenarioId = this.id;
            const domainName = $('.btn-apitest-in-toggle').attr('domain');
            const title = $('.btn-apitest-in-toggle').attr('title');

            axios({
                method: 'post',
                url: '/api/1.0/apirun',
                data: {
                    apiId: apiId,
                    scenarioId: scenarioId,
                    domainName: domainName,
                    title: title,
                    report_info: {
                        report_level: 2,
                        report_type: 'api',
                    }
                }, 
                headers: {'Content-Type': 'application/json'}
            })
            .then((response) => {
                if (response.status === 200) {
                    swal({
                        text: 'Add api test to running list successfully',
                        icon: "success",
                        confirmButtonClass: "btn-success",
                    })
                    setTimeout(()=> {
                        window.location.reload();
                    }, 2000)
                    //- alert('Run api test successfully')
                    //- window.location.reload();
                }
            })
            .catch((error) => {
                console.log('catch: ', error)
                swal({
                    text: 'Run api test error',
                    icon: "error",
                    confirmButtonClass: "btn-danger",
                })
                setTimeout(()=> {
                    window.location.reload();
                }, 2000)
                //- alert('Run api test error')
            })
        })

        $(document).ready(() => {
            let popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
            let popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
                return new bootstrap.Popover(popoverTriggerEl)
            })
        })
